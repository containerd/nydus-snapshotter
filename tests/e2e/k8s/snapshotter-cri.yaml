---
apiVersion: v1
kind: Namespace
metadata:
  name: nydus-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: nydus-snapshotter-sa
  namespace: nydus-system
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: nydus-snapshotter-role
rules:
  - apiGroups: 
    - ""
    resources: 
    - nodes
    verbs:
    - get
    - patch

---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: nydus-snapshotter-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: nydus-snapshotter-role
subjects:
  - kind: ServiceAccount
    name: nydus-snapshotter-sa
    namespace: nydus-system
---
apiVersion: v1
kind: Pod
metadata:
  name: nydus-snapshotter
  namespace: nydus-system
  labels:
    app: nydus-snapshotter
spec:
  serviceAccountName: nydus-snapshotter-sa
  hostNetwork: true
  hostPID: true
  containers:
    - name: nydus-snapshotter
      image: "local-dev:e2e"
      imagePullPolicy: IfNotPresent
      env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: FS_DRIVER
          valueFrom:
            configMapKeyRef:
              name: nydus-snapshotter-configs
              key: FS_DRIVER
              optional: true
        - name: ENABLE_CONFIG_FROM_VOLUME
          valueFrom:
            configMapKeyRef:
              name: nydus-snapshotter-configs
              key: ENABLE_CONFIG_FROM_VOLUME
              optional: true
        - name: ENABLE_RUNTIME_SPECIFIC_SNAPSHOTTER
          valueFrom:
            configMapKeyRef:
              name: nydus-snapshotter-configs
              key: ENABLE_RUNTIME_SPECIFIC_SNAPSHOTTER
              optional: true
        - name: ENABLE_SYSTEMD_SERVICE
          valueFrom:
            configMapKeyRef:
              name: nydus-snapshotter-configs
              key: ENABLE_SYSTEMD_SERVICE
              optional: true
      lifecycle:
        preStop:
          exec:
            command:
              - "bash"
              - "-c"
              - |
                /opt/nydus-artifacts/opt/nydus/snapshotter.sh cleanup
      command:
        - bash
        - -c
        - |-
          /opt/nydus-artifacts/opt/nydus/snapshotter.sh deploy
      volumeMounts:
        - name: config-volume
          mountPath: "/etc/nydus-snapshotter"
        - name: nydus-lib
          mountPath: "/var/lib/containerd/io.containerd.snapshotter.v1.nydus"
          mountPropagation: Bidirectional
        - name: nydus-run
          mountPath: "/run/containerd-nydus"
          mountPropagation: Bidirectional
        - name: nydus-opt
          mountPath: "/opt/nydus"
          mountPropagation: Bidirectional
        - name: nydus-etc
          mountPath: "/etc/nydus"
          mountPropagation: Bidirectional
        - name: containerd-conf
          mountPath: "/etc/containerd/"
        - name: local-bin
          mountPath: "/usr/local/bin/"
        - name: etc-systemd-system
          mountPath: "/etc/systemd/system/"
        - name: fuse
          mountPath: /dev/fuse
      securityContext:
        privileged: true

  volumes:
    - name: config-volume
      configMap:
        name: nydus-snapshotter-configs
        optional: true
    - name: nydus-run
      hostPath:
        path: /run/containerd-nydus
        type: DirectoryOrCreate
    - name: nydus-lib
      hostPath:
        path: /var/lib/containerd/io.containerd.snapshotter.v1.nydus
        type: DirectoryOrCreate
    - name: nydus-etc
      hostPath:
          path: /etc/nydus
          type: DirectoryOrCreate
    - name: nydus-opt
      hostPath:
        path: /opt/nydus
        type: DirectoryOrCreate
    - name: containerd-conf
      hostPath:
        path: /etc/containerd/
    - name: local-bin
      hostPath:
        path: /usr/local/bin/
    - name: etc-systemd-system
      hostPath:
        path: /etc/systemd/system/
    - name: fuse
      hostPath:
        path: /dev/fuse
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nydus-snapshotter-configs
  labels:
    app: nydus-snapshotter
  namespace: nydus-system
data:
  FS_DRIVER: "fusedev"
  ENABLE_CONFIG_FROM_VOLUME: "true"
  ENABLE_RUNTIME_SPECIFIC_SNAPSHOTTER: "false"
  ENABLE_SYSTEMD_SERVICE: "true"
  config.toml: |-
    version = 1
    root = "/var/lib/containerd/io.containerd.snapshotter.v1.nydus"
    address = "/run/containerd-nydus/containerd-nydus-grpc.sock"
    daemon_mode = "multiple"
    # Whether snapshotter should try to clean up resources when it is closed
    cleanup_on_close = false
    
    [system]
    # Snapshotter's debug and trace HTTP server interface
    enable = true
    # Unix domain socket path where system controller is listening on
    address = "/run/containerd-nydus/system.sock"
    
    [metrics]
    # Enable by assigning an address, empty indicates metrics server is disabled
    address = ":9110"
    # The maximum duration an I/O operation can be pending before it's considered hung.
    hung_io_interval = "30s"
    # The interval at which metrics are collected and updated.
    collect_interval = "1m"
    
    [experimental]
    # Whether tp enable stargz support
    enable_stargz = false
    
    [daemon]
    nydusd_path = "/usr/local/bin/nydusd"
    nydusimage_path = "/usr/local/bin/nydus-image"
    # fusedev or fscache
    fs_driver = "fusedev"
    # Specify nydusd log level
    log_level = "info"
    # How to process when daemon dies: "none", "restart" or "failover"
    recover_policy = "restart"
    # Specify a configuration file for nydusd
    nydusd_config = "/etc/nydus/nydusd.json"
    # The fuse or fscache IO working threads started by nydusd
    threads_number = 4
    
    [log]
    # Snapshotter's log level
    level = "info"
    log_rotation_compress = true
    log_rotation_local_time = true
    # Max number of days to retain logs
    log_rotation_max_age = 7
    log_rotation_max_backups = 5
    # In unit MB(megabytes)
    log_rotation_max_size = 1
    log_to_stdout = false
    
    [remote]
    convert_vpc_registry = false
    
    [remote.auth]
    # Fetch the private registry auth by listening to K8s API server
    enable_kubeconfig_keychain = false
    # synchronize `kubernetes.io/dockerconfigjson` secret from kubernetes API server with specified kubeconfig (default `$KUBECONFIG` or `~/.kube/config`)
    kubeconfig_path = ""
    # Fetch the private registry auth as CRI image service proxy
    enable_cri_keychain = true
    # the target image service when using image proxy
    image_service_address = ""
    
    [snapshot]
    enable_nydus_overlayfs = false
    # Whether to remove resources when a snapshot is removed
    sync_remove = false
    
    [cache_manager]
    disable = false
    gc_period = "24h"
    cache_dir = ""
    
    [image]
    public_key_file = ""
    validate_signature = false

  nydusd.json: |-
    {
      "device": {
        "backend": {
          "type": "registry",
          "config": {
            "scheme": "",
            "skip_verify": true,
            "timeout": 10,
            "connect_timeout": 10,
            "retry_limit": 2
          }
        },
        "cache": {
          "type": "blobcache",
          "config": {
            "work_dir": "/var/lib/nydus/cache/"
          }
        }
      },
      "mode": "direct",
      "digest_validate": false,
      "iostats_files": false,
      "enable_xattr": true,
      "amplify_io": 1048576,
      "fs_prefetch": {
        "enable": true,
        "threads_count": 10,
        "merging_size": 131072,
        "bandwidth_rate": 1048576
      }
    }
