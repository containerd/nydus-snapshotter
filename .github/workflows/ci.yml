name: CI

on:
  push:
    branches: ["*"]
  pull_request:
    branches: [main]

jobs:
  build:
    name: Build
    timeout-minutes: 10
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.17'
      - name: Check out code
        uses: actions/checkout@v1
      - name: cache go mod
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go
      - name: Build
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.43.0
          export PATH=$PATH:$(go env GOPATH)/bin
          make
          make test
          make check

  smoke:
    name: Smoke
    timeout-minutes: 10
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.17'
      - name: Check out code
        uses: actions/checkout@v1
      - name: cache go mod
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go
      - name: Set up containerd
        uses: crazy-max/ghaction-setup-containerd@v2
      - name: Set up docker registry
        run: |
          docker run -d -p 5000:5000 --restart=always --name registry registry:2
      - name: Build
        run: |
          # Download nydus components
          NYDUS_VER=v$(curl -s "https://api.github.com/repos/dragonflyoss/image-service/releases/latest" | jq -r .tag_name | sed 's/^v//')
          wget https://github.com/dragonflyoss/image-service/releases/download/$NYDUS_VER/nydus-static-$NYDUS_VER-linux-amd64.tgz
          tar xzvf nydus-static-$NYDUS_VER-linux-amd64.tgz
          mkdir -p /usr/bin
          sudo mv nydus-static/nydus-image nydus-static/nydusd-fusedev nydus-static/nydusify /usr/bin/
          sudo ln /usr/bin/nydusd-fusedev /usr/bin/nydusd

          export PATH=$PATH:$(go env GOPATH)/bin
          make smoke

  cross-build-test:
    name: Cross Build Test
    timeout-minutes: 10
    runs-on: ubuntu-latest
    strategy:
      matrix:
        GOOS: ['linux', 'windows', 'darwin']
        GOARCH: ['amd64', 'arm64']
    steps:
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.17'
      - name: Check out code
        uses: actions/checkout@v1
      - name: cache go mod
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go
      - name: Build
        run: |
          make -e GOOS=${{ matrix.GOOS }} GOARCH=${{ matrix.GOARCH }}

  coverage:
    name: Code coverage
    timeout-minutes: 10
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.17'
      - name: Checkout code
        uses: actions/checkout@v2
      - name: cache go mod
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go
      - name: Run unit tests.
        run: make cover
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos
          files: ./coverage.txt
