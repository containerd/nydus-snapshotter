/*
 * Copyright (c) 2020. Ant Group. All rights reserved.
 * Copyright (c) 2022. Nydus Developers. All rights reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

package daemon

import (
	"os"
	"path/filepath"
	"sync"
	"sync/atomic"
	"syscall"
	"time"

	"github.com/containerd/containerd/log"
	"github.com/containerd/nydus-snapshotter/internal/config"
	"github.com/containerd/nydus-snapshotter/pkg/daemon/types"
	"github.com/containerd/nydus-snapshotter/pkg/errdefs"
	"github.com/containerd/nydus-snapshotter/pkg/supervisor"
	"github.com/containerd/nydus-snapshotter/pkg/utils/erofs"
	"github.com/containerd/nydus-snapshotter/pkg/utils/mount"
	"github.com/containerd/nydus-snapshotter/pkg/utils/retry"
	"github.com/pkg/errors"
)

const (
	APISocketFileName   = "api.sock"
	SharedNydusDaemonID = "shared_daemon"
)

type NewDaemonOpt func(d *Daemon) error

type States struct {
	// Generated by daemons manager as a unique to identify a nydusd
	ID          string
	ProcessID   int
	APISocket   string
	LogDir      string
	LogLevel    string
	LogToStdout bool
	FsDriver    string
	// Host kernel mountpoint, only applies to fuse fs driver. The fscache fs driver
	// doesn't need a host kernel mountpoint.
	Mountpoint string
	ThreadNum  int
	// Where the configuration file resides, all rafs instances share the same configuration template
	ConfigDir      string
	SupervisorPath string
}

// TODO: Record queried nydusd state
type Daemon struct {
	States States

	mu sync.Mutex
	// FsInstances map[int]*Rafs
	// should be persisted to DB
	// maps to at least one rafs instance.
	// It is possible to be empty after the daemon object is created.
	Instances rafsSet

	Once *sync.Once
	// client will be rebuilt on Reconnect, skip marshal/unmarshal
	client NydusdClient
	// Nil means this daemon object has no supervisor
	Supervisor *supervisor.Supervisor
	Config     config.DaemonConfig

	ref int32
}

func (d *Daemon) Lock() {
	d.mu.Lock()
}

func (d *Daemon) Unlock() {
	d.mu.Unlock()
}

func (d *Daemon) ID() string {
	return d.States.ID
}

func (d *Daemon) Pid() int {
	return d.States.ProcessID
}

func (d *Daemon) IncRef() {
	atomic.AddInt32(&d.ref, 1)
}

func (d *Daemon) DecRef() int32 {
	return atomic.AddInt32(&d.ref, -1)
}

func (d *Daemon) HostMountpoint() (mnt string) {
	// Identify a shared nydusd for multiple rafs instances.
	mnt = d.States.Mountpoint
	return
}

// Each nydusd daemon has a copy of configuration json file.
func (d *Daemon) ConfigFile(instanceID string) string {
	if instanceID == "" {
		return filepath.Join(d.States.ConfigDir, "config.json")
	}
	return filepath.Join(d.States.ConfigDir, instanceID, "config.json")
}

// NydusdThreadNum returns how many working threads are needed of a single nydusd
func (d *Daemon) NydusdThreadNum() int {
	return d.States.ThreadNum
}

func (d *Daemon) GetAPISock() string {
	return d.States.APISocket
}

func (d *Daemon) LogFile() string {
	return filepath.Join(d.States.LogDir, "nydusd.log")
}

func (d *Daemon) AddInstance(r *Rafs) {
	d.Instances.Add(r)
	d.IncRef()
	r.DaemonID = d.ID()
}

// Nydusd daemon current working state by requesting to nydusd:
// 1. INIT
// 2. READY: All needed resources are ready.
// 3. RUNNING
func (d *Daemon) State() (types.DaemonState, error) {
	if err := d.ensureClient("getting daemon state"); err != nil {
		return types.DaemonStateUnknown, err
	}

	// Protect daemon client when it's being reset.
	d.Lock()
	defer d.Unlock()

	info, err := d.client.GetDaemonInfo()
	if err != nil {
		return types.DaemonStateUnknown, err
	}

	return info.DaemonState(), nil
}

// Waits for some time until daemon reaches the expected state.
// For example:
//  1. INIT
//  2. READY
//  3. RUNNING
func (d *Daemon) WaitUntilState(expected types.DaemonState) error {
	return retry.Do(func() error {
		state, err := d.State()
		if err != nil {
			return errors.Wrapf(err, "wait until daemon is %s", expected)
		}

		if state != expected {
			return errors.Errorf("daemon %s is not %s yet, current state %s",
				d.ID(), expected, state)
		}

		return nil
	},
		retry.Attempts(20), // totally wait for 2 seconds, should be enough
		retry.LastErrorOnly(true),
		retry.Delay(100*time.Millisecond),
	)
}

func (d *Daemon) SharedMount(rafs *Rafs) error {
	if err := d.ensureClient("share mount"); err != nil {
		return err
	}

	if d.States.FsDriver == config.FsDriverFscache {
		if err := d.sharedErofsMount(rafs); err != nil {
			return errors.Wrapf(err, "failed to erofs mount")
		}
		return nil
	}

	bootstrap, err := rafs.BootstrapFile()
	if err != nil {
		return err
	}

	c, err := config.NewDaemonConfig(d.States.FsDriver, d.ConfigFile(rafs.SnapshotID))
	if err != nil {
		return errors.Wrapf(err, "Failed to reload instance configuration %s",
			d.ConfigFile(rafs.SnapshotID))
	}

	cfg, err := c.DumpString()
	if err != nil {
		return errors.Wrap(err, "dump instance configuration")
	}

	// Protect daemon client when it's being reset.
	d.Lock()
	if err := d.client.Mount(rafs.RelaMountpoint(), bootstrap, cfg); err != nil {
		d.Unlock()
		return errors.Wrapf(err, "mount rafs instance")
	}
	d.Unlock()

	su := d.Supervisor
	if su != nil {
		// TODO: This should be optional by checking snapshotter's configuration.
		// FIXME: Is it possible the states are overwritten during two API mounts.
		// FIXME: What if nydusd does not support sending states.
		err = su.FetchDaemonStates(func() error {
			if err := d.SendStates(); err != nil {
				return errors.Wrapf(err, "send daemon %s states", d.ID())
			}
			return nil
		})
		if err != nil {
			log.L.Warnf("Daemon %s does not support sending states", d.ID())
		}
	}

	return nil
}

func (d *Daemon) SharedUmount(rafs *Rafs) error {
	if err := d.ensureClient("share umount"); err != nil {
		return err
	}

	if d.States.FsDriver == config.FsDriverFscache {
		if err := d.sharedErofsUmount(rafs); err != nil {
			return errors.Wrapf(err, "failed to erofs mount")
		}
		return nil
	}

	// Protect daemon client when it's being reset.
	d.Lock()
	defer d.Unlock()

	return d.client.Umount(rafs.RelaMountpoint())
}

func (d *Daemon) sharedErofsMount(rafs *Rafs) error {
	if err := d.ensureClient("erofs mount"); err != nil {
		return err
	}

	// TODO: Why fs cache needing this work dir?
	if err := os.MkdirAll(rafs.FscacheWorkDir(), 0755); err != nil {
		return errors.Wrapf(err, "failed to create fscache work dir %s", rafs.FscacheWorkDir())
	}

	// Protect daemon client when it's being reset.
	d.Lock()
	defer d.Unlock()

	c, err := config.NewDaemonConfig(d.States.FsDriver, d.ConfigFile(rafs.SnapshotID))
	if err != nil {
		log.L.Errorf("Failed to reload daemon configuration %s, %s", d.ConfigFile(rafs.SnapshotID), err)
		return err
	}

	cfgStr, err := c.DumpString()
	if err != nil {
		return err
	}

	if err := d.client.BindBlob(cfgStr); err != nil {
		return errors.Wrapf(err, "request to bind fscache blob")
	}

	mountPoint := rafs.GetMountpoint()
	if err := os.MkdirAll(mountPoint, 0755); err != nil {
		return errors.Wrapf(err, "create mountpoint %s", mountPoint)
	}

	bootstrapPath, err := rafs.BootstrapFile()
	if err != nil {
		return err
	}
	fscacheID := erofs.FscacheID(rafs.SnapshotID)

	cfg := c.(*config.FscacheDaemonConfig)
	rafs.AddAnnotation(AnnoFsCacheDomainID, cfg.DomainID)

	if err := erofs.Mount(bootstrapPath, cfg.DomainID, fscacheID, mountPoint); err != nil {
		if !errdefs.IsErofsMounted(err) {
			return errors.Wrapf(err, "mount erofs to %s", mountPoint)
		}
		// When snapshotter exits (either normally or abnormally), it will not have a
		// chance to umount erofs mountpoint, so if snapshotter resumes running and mount
		// again (by a new request to create container), it will need to ignore the mount
		// error `device or resource busy`.
		log.L.Warnf("erofs mountpoint %s has been mounted", mountPoint)
	}

	return nil
}

func (d *Daemon) sharedErofsUmount(rafs *Rafs) error {
	if err := d.ensureClient("erofs umount"); err != nil {
		return err
	}

	// Protect daemon client when it's being reset.
	d.Lock()
	defer d.Unlock()

	domainID := rafs.Annotations[AnnoFsCacheDomainID]

	if err := d.client.UnbindBlob(domainID); err != nil {
		return errors.Wrapf(err, "request to unbind fscache blob")
	}

	mountpoint := rafs.GetMountpoint()
	if err := erofs.Umount(mountpoint); err != nil {
		return errors.Wrapf(err, "umount erofs %s mountpoint, %s", err, mountpoint)
	}

	return nil
}

func (d *Daemon) SendStates() error {
	if err := d.ensureClient("send states"); err != nil {
		return err
	}

	d.Lock()
	defer d.Unlock()

	if err := d.client.SendFd(); err != nil {
		return errors.Wrap(err, "request to send states")
	}

	return nil
}

func (d *Daemon) TakeOver() error {
	if err := d.ensureClient("takeover"); err != nil {
		return err
	}

	d.Lock()
	defer d.Unlock()

	if err := d.client.TakeOver(); err != nil {
		return errors.Wrap(err, "request to take over")
	}

	return nil
}

func (d *Daemon) Start() error {
	if err := d.ensureClient("start service"); err != nil {
		return err
	}

	d.Lock()
	defer d.Unlock()

	if err := d.client.Start(); err != nil {
		return errors.Wrap(err, "request to start service")
	}

	return nil
}

func (d *Daemon) GetFsMetrics(sid string) (*types.FsMetrics, error) {
	if err := d.ensureClient("get metrics"); err != nil {
		return nil, err
	}

	// Protect daemon client when it's being reset.
	d.Lock()
	defer d.Unlock()

	return d.client.GetFsMetrics(sid)
}

func (d *Daemon) GetCacheMetrics(sid string) (*types.CacheMetrics, error) {
	if err := d.ensureClient("get cache metrics"); err != nil {
		return nil, err
	}

	// Protect daemon client when it's being reset.
	d.Lock()
	defer d.Unlock()

	return d.client.GetCacheMetrics(sid)
}

func (d *Daemon) initClient() error {
	client, err := NewNydusClient(d.GetAPISock())
	if err != nil {
		return errors.Wrap(err, "failed to create new nydus client")
	}

	d.client = client
	return nil
}

func (d *Daemon) ResetClient() {
	d.Lock()
	d.client = nil
	d.Once = &sync.Once{}
	d.Unlock()
}

func (d *Daemon) ensureClient(situation string) (err error) {
	d.Lock()
	defer d.Unlock()

	d.Once.Do(func() {
		if d.client == nil {
			if ierr := d.initClient(); ierr != nil {
				err = errors.Wrapf(ierr, "failed to %s", situation)
				d.Once = &sync.Once{}
			}
		}
	})

	if err == nil && d.client == nil {
		return errors.Errorf("failed to %s, client not initialized", situation)
	}

	return
}

func (d *Daemon) Terminate() error {
	// if we found pid here, we need to kill and wait process to exit, Pid=0 means somehow we lost
	// the daemon pid, so that we can't kill the process, just roughly umount the mountpoint
	d.Lock()
	defer d.Unlock()

	if d.Pid() > 0 {
		p, err := os.FindProcess(d.Pid())
		if err != nil {
			return errors.Wrapf(err, "find process %d", d.Pid())
		}
		if err = p.Signal(syscall.SIGTERM); err != nil {
			return errors.Wrapf(err, "send SIGTERM signal to process %d", d.Pid())
		}
	}

	return nil
}

func (d *Daemon) Wait() error {
	// if we found pid here, we need to kill and wait process to exit, Pid=0 means somehow we lost
	// the daemon pid, so that we can't kill the process, just roughly umount the mountpoint
	d.Lock()
	defer d.Unlock()

	if d.Pid() > 0 {
		p, err := os.FindProcess(d.Pid())
		if err != nil {
			return errors.Wrapf(err, "find process %d", d.Pid())
		}

		// if nydus-snapshotter restarts, it will break the relationship between nydusd and
		// nydus-snapshotter, p.Wait() will return err, so here should exclude this case
		if _, err = p.Wait(); err != nil && !errors.Is(err, syscall.ECHILD) {
			log.L.Errorf("failed to process wait, %v", err)

		} else {
			mount.WaitUntilUnmounted(d.HostMountpoint())
		}
	}

	return nil
}

func (d *Daemon) ClearVestige() {
	mounter := mount.Mounter{}
	if d.States.FsDriver == config.FsDriverFscache {
		instances := d.Instances.List()
		for _, i := range instances {
			if err := mounter.Umount(i.GetMountpoint()); err != nil {
				log.L.Warnf("Can't umount %s, %v", d.States.Mountpoint, err)
			}
		}
	} else {
		log.L.Infof("Unmounting %s when clear vestige", d.HostMountpoint())
		if err := mounter.Umount(d.HostMountpoint()); err != nil {
			log.L.Warnf("Can't umount %s, %v", d.States.Mountpoint, err)
		}
	}

	// Nydusd judges if it should enter failover phrase by checking
	// if unix socket is existed and it can't be connected.
	if err := os.Remove(d.GetAPISock()); err != nil {
		log.L.Warnf("Can't delete residual unix socket %s, %v", d.GetAPISock(), err)
	}

	// TODO: Make me more clear and simple!
	// Let't transport builder wait for nydusd startup again until it sees the created socket file.
	d.ResetClient()
}

// Instantiate a daemon object
func NewDaemon(opt ...NewDaemonOpt) (*Daemon, error) {
	d := &Daemon{}
	d.States.ID = newID()
	d.Once = &sync.Once{}
	d.Instances = rafsSet{instances: make(map[string]*Rafs)}

	for _, o := range opt {
		err := o(d)
		if err != nil {
			return nil, err
		}
	}

	return d, nil
}
