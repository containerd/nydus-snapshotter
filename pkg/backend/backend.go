/*
 * Copyright (c) 2022. Nydus Developers. All rights reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

package backend

import (
	"context"
	"fmt"

	"github.com/containerd/containerd/content"
	"github.com/opencontainers/go-digest"
)

const (
	BackendTypeOSS     = "oss"
	BackendTypeS3      = "s3"
	BackendTypeLocalFS = "localfs"
)

const (
	// Blob size bigger than 100MB, apply multiparts upload.
	MultipartsUploadThreshold = 100 * 1024 * 1024
)

// Backend uploads blobs generated by nydus-image builder to a backend storage such as:
// - oss: A object storage backend, which uses its SDK to upload blob file.
type Backend interface {
	// Push pushes specified blob file to remote storage backend.
	Push(ctx context.Context, ra content.ReaderAt, blobDigest digest.Digest) error
	// Check checks whether a blob exists in remote storage backend,
	// blob exists -> return (blobPath, nil)
	// blob not exists -> return ("", err)
	Check(blobDigest digest.Digest) (string, error)
	// Type returns backend type name.
	Type() string
}

// Nydus driver majorly works for registry backend, which means blob is stored in
// registry as per OCI distribution specification. But nydus can also make OSS or
// other storage services as backend storage. Pass config as byte slice here because
// we haven't find a way to represent all backend config at the same time.
func NewBackend(_type string, config []byte) (Backend, error) {
	switch _type {
	case BackendTypeOSS:
		return newOSSBackend(config)
	case BackendTypeS3:
		return newS3Backend(config)
	case BackendTypeLocalFS:
		return newLocalFSBackend(config)
	default:
		return nil, fmt.Errorf("unsupported backend type %s", _type)
	}
}
